{
  "version": 3,
  "sources": ["../../../../../benghedadra/Documents/computer_science/Programming/git_repos/s3ImageUpload/netlify/functions/getS3Url.ts"],
  "sourceRoot": "C:/Users/BENGHE~1/AppData/Local/Temp/tmp-27728-0cPDE7XDRsuc",
  "sourcesContent": ["import aws from 'aws-sdk';\r\nimport crypto from 'crypto';\r\nimport { promisify } from \"util\"\r\n\r\nconst randomBytes = promisify(crypto.randomBytes)\r\nconst region = \"us-east-1\"\r\nconst bucketName = \"beniko\"\r\nconst accessKeyId =\"AKIAWPNDMLEYB4G3MDJY\"\r\nconst secretAccessKey = \"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\"\r\n\r\nconst s3 = new aws.S3({\r\n\tregion,\r\n\taccessKeyId,\r\n\tsecretAccessKey,\r\n\tsignatureVersion: 'v4'\r\n})\r\n//Handler\r\nexports.handler = async (event: any, context: any, callback: any) => {\r\n\tlet resp: any\r\n\tlet putURL: string = ''\r\n\ttry {\r\n\t\tconst rawBytes = await randomBytes(16)\r\n\t\tconst imageName = rawBytes.toString()\r\n\t\t// The PUT operation will only be valid for the next 2-minutes.\r\n\t\tvar putParams = {\r\n\t\t\tBucket: bucketName,\r\n\t\t\tKey: imageName,\r\n\t\t\tExpires: (2 * 60),\r\n\t\t};\r\n\r\n\t\t// The GET operation will only be valid for the next 60-minutes.\r\n\t\t// --\r\n\t\t// NOTE: Even though the full GET operation is only valid for a week, we can\r\n\t\t// tell the browser to cache the response for longer using the cache-control\r\n\t\t// header (which we are defining via the ResponseCacheControl override).\r\n\t\tvar getParams = {\r\n\t\t\tBucket: bucketName,\r\n\t\t\tKey: imageName,\r\n\t\t\tExpires: (60 * 60),\r\n\t\t\tResponseCacheControl: \"max-age=604800\"\r\n\t\t};\r\n\t\t// var putUrl =   s3.getSignedUrl( \"putObject\", putParams );\r\n\t\t//var getUrl =   s3.getSignedUrl( \"getObject\", getParams );\r\n\t\tvar params = { Bucket: bucketName, Key: imageName, Expires: 60 };\r\n\t\tvar promise = await s3.getSignedUrlPromise('putObject', params).then(value=>putURL=value)\r\n\r\n\t\tconsole.log('before resp URL', putURL)\r\n\t\t//console.log('before resp URL', promise.ok)\r\n\t\tresp = {\r\n\t\t\tstatusCode: 200,\r\n\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tURL:putURL \r\n\t\t\t\t//getURL: getUrl\r\n\t\t\t})\r\n\t\t}\r\n\t} catch (err: any) {\r\n\t\tconsole.log(err.stack)\r\n\t\tresp = {\r\n\t\t\tstatusCode: 400,\r\n\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\tbody: err.stack\r\n\t\t};\r\n\t}\r\n\treturn resp\r\n\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA,qBAAgB;AAChB,oBAAmB;AACnB,kBAA0B;AAE1B,IAAM,cAAc,2BAAU,sBAAO,WAAW;AAChD,IAAM,SAAS;AACf,IAAM,aAAa;AACnB,IAAM,cAAa;AACnB,IAAM,kBAAkB;AAExB,IAAM,KAAK,IAAI,uBAAI,GAAG;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB,CAAC;AAED,QAAQ,UAAU,OAAO,OAAY,SAAc,aAAkB;AACpE,MAAI;AACJ,MAAI,SAAiB;AACrB,MAAI;AACH,UAAM,WAAW,MAAM,YAAY,EAAE;AACrC,UAAM,YAAY,SAAS,SAAS;AAEpC,QAAI,YAAY;AAAA,MACf,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,SAAU,IAAI;AAAA,IACf;AAOA,QAAI,YAAY;AAAA,MACf,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,SAAU,KAAK;AAAA,MACf,sBAAsB;AAAA,IACvB;AAGA,QAAI,SAAS,EAAE,QAAQ,YAAY,KAAK,WAAW,SAAS,GAAG;AAC/D,QAAI,UAAU,MAAM,GAAG,oBAAoB,aAAa,MAAM,EAAE,KAAK,WAAO,SAAO,KAAK;AAExF,YAAQ,IAAI,mBAAmB,MAAM;AAErC,WAAO;AAAA,MACN,YAAY;AAAA,MACZ,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAC9C,MAAM,KAAK,UAAU;AAAA,QACpB,KAAI;AAAA,MAEL,CAAC;AAAA,IACF;AAAA,EACD,SAAS,KAAP;AACD,YAAQ,IAAI,IAAI,KAAK;AACrB,WAAO;AAAA,MACN,YAAY;AAAA,MACZ,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAC9C,MAAM,IAAI;AAAA,IACX;AAAA,EACD;AACA,SAAO;AAER;",
  "names": []
}
